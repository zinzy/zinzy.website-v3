@tailwind base;
@tailwind components;
@tailwind utilities;

/* @font-face {
  font-family: 'FreightText Pro Book';
  src: url('/fonts/FreightTextProBook-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: 'FreightText Pro Book';
  src: url('/fonts/FreightTextProBook-Italic.woff2') format('woff2');
  font-weight: normal;
  font-style: italic;
  font-display: swap;
} */





body, html {
  font-size: 18px;  
  @media screen and (min-width: 992px) {
    /* font-size: 22px;   */
  } 
  /* @media screen and (min-width: 1900px) {
    font-size: 28px; 
  } */
}

.container {
  max-width:550px;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
}

.prose :where(dt):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  @apply font-medium  font-sans;
}

.text-primary {
  @apply text-gray-950 dark:text-white;
}
.text-secondary {
  @apply text-gray-500 dark:text-zinc-400;
}

article {
  header {
    @apply mb-14
  }
}

figure figcaption {
  margin-top: 1rem;
  font-size: 80%;
  @apply text-secondary text-xs;
}

.message {
  border-radius: 20px;
  padding: 8px 15px;
  margin-top: 5px;
  margin-bottom: 5px;
  display: inline-block;
}

img {
  @apply rounded;
}


.button {
  @apply border px-3 h-9 leading-9 rounded inline-block text-xs font-semibold dark:border-zinc-700 hover:text-pink-500 hover:bg-pink-50 hover:border-transparent  dark:hover:border-transparent dark:hover:bg-pink-300/10 dark:hover:text-pink-300;
}
.underline {
  @apply underline-offset-4 decoration-gray-600 decoration-1 dark:decoration-gray-300 hover:decoration-gray-950;
}

[class*="border"] {
  @apply dark:border-zinc-700
}


.shadow-subtle {
  -webkit-box-shadow: 0px 2px 84px -29px rgba(0,0,0,0.09);
  -moz-box-shadow: 0px 2px 84px -29px rgba(0,0,0,0.09);
  box-shadow: 0px 2px 84px -29px rgba(0,0,0,0.09);  
}


.prose :where(a):not(:where([class~="not-prose"],[class~="not-prose"] *)) {
  text-decoration: none; 
  font-weight: 500;
}

details > summary::marker {
  display: none;
  content: "Open ";
}
details[open] > summary::marker {
  display: none;
  content: "Close ";
}

#header details .fixed {
  -webkit-box-shadow: 0px 5px 15px 0px rgba(0,0,0,0.09);
  -moz-box-shadow: 0px 5px 15px 0px rgba(0,0,0,0.09);
  box-shadow: 0px 5px 15px 0px rgba(0,0,0,0.09);
}

h1, h2, h3, h4, h5, h6 {
  @apply font-medium font-sans dark:text-white ;
  a {
    @apply hover:text-pink-500 dark:hover:text-pink-300;
  }
}
.prose {
  h1, h2, h3, h4, h5, h6 {
    @apply font-medium font-sans dark:text-white;
    a {
      @apply hover:text-pink-500 dark:hover:text-pink-300;
    }
  }
}


.font-serif {
  @apply text-lg text-gray-700 dark:text-zinc-400;
}

a {
  @apply dark:text-white;
}

.prose a {
  @apply underline hover:text-pink-500 hover:decoration-pink-500 dark:hover:text-pink-300 dark:hover:decoration-pink-300;
}

.not-prose a:where([class~="aside"]) {
  text-decoration: none;
}

figcaption {
  @apply font-sans text-xs;
}

.prose :where(figcaption):not(:where([class~="not-prose"],[class~="not-prose"] *)) {

  @apply font-sans text-xs;
}


.aside {
  @apply text-xs bg-gray-50 dark:bg-zinc-700 p-3 lg:w-1/3 float-right mb-3 lg:ml-3 rounded break-words;
}

.aside p {
  @apply m-0 p-0
}

.aside p a {
  @apply no-underline;
}

.prose :where(blockquote p:first-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::before,
.prose :where(blockquote p:last-of-type):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: none;
}

.prose blockquote {
  @apply not-italic md:w-48 text-xl border-0 m-0 p-0 mb-3 md:ml-7 text-pink-500 dark:text-pink-300 font-semibold xl:absolute md:float-right  xl:-right-60 2xl:w-60 2xl:-right-80;
  p {
    @apply m-0 p-0
  }
}


.prose blockquote:nth-of-type(even) {
  @apply md:float-left xl:-left-64 2xl:-left-80 md:ml-0 md:mr-7
}

.prose code {
  @apply bg-pink-50 py-1 px-2 text-xs rounded text-pink-700 whitespace-nowrap
}

.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before,
.prose :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after {
  content: "";
}